#!/bin/bash -e

DIR=$HOME/dev/foreman-packaging

ACTION=$1
if [[ -z $ACTION ]] ; then
	echo "Usage: $0 ACTION"
	exit 1
fi
shift

move_old() {
	if [[ -e "$DIR"/package_manifest.yaml ]] ; then
		git rm -f "$DIR"/package_manifest.yaml
	fi

	for to_move in $(git --git-dir $DIR/.git show --name-only $COMMIT | grep ^packages) ; do
		if [[ -f "$DIR/$to_move" ]] ; then
			local target="$DIR/$(basename $(dirname $to_move))"
			mkdir -p "$target"
			git mv "$DIR/$to_move" "$target"
		fi
	done
}

pick() {
	VERSION=$1
	COMMIT=$2

	if [[ -z $VERSION ]] || [[ -z $COMMIT ]]; then
		echo "Usage: $0 cherry-pick VERSION COMMIT"
		exit 1
	fi

	COMMIT=$(git rev-parse $COMMIT)

	git checkout rpm/$VERSION
	git pull
	git cherry-pick $COMMIT || true

	if [[ $VERSION == "1.16" ]] || [[ $VERSION == "1.17" ]] ; then
		move_old
	fi
}

changed() {
	git --git-dir $DIR/.git show --pretty="format:" --name-only $1 | grep .spec | xargs --no-run-if-empty dirname | sort -u | sed "s|^|$DIR/|"
}

sources() {
	$DIR/setup_sources.sh .
}

tag() {
	if [[ $(git rev-parse --abbrev-ref HEAD) == "rpm/develop" ]] ; then
		echo "Refusing to tag in rpm/develop"
		exit 1
	fi
	sources
	tito tag --keep-version --accept-auto-changelog
	git push
}

release() {
	sources
	tito release koji-foreman koji-foreman-plugins
}

get_build() {
	rpmspec --srpm -q --define 'dist .el7' --queryformat "%{name}-%{version}-%{release}\n" "$@"
}

get_tfm_build() {
	get_build --define 'scl tfm' "$@"
}

if [[ $ACTION == "pick" ]] ; then
	pick "$@"
elif [[ $ACTION == "tag" ]] ; then
	tag
elif [[ $ACTION == "tag-changed" ]] ; then
	for dir in $(changed $1) ; do
		pushd $dir
		tag
		popd
	done
elif [[ $ACTION == "tag-release-changed" ]] ; then
	for dir in $(changed $1) ; do
		pushd $dir
		tag
		release
		popd
	done
elif [[ $ACTION == "release-changed" ]] ; then
	if [[ -e "$DIR"/package_manifest.yaml ]] ; then
		changed $1 | xargs -n 1 basename | xargs obal release -e build_package_wait=False
	else
		for dir in $(changed $1) ; do
			pushd $dir
			release
			popd
		done
	fi
elif [[ $ACTION == "changed" ]] ; then
	changed $1
elif [[ $ACTION == "sources" ]] ; then
	sources
elif [[ $ACTION == "release" ]] ; then
	release
elif [[ $ACTION == "get-build" ]] ; then
	for dir in "$@" ; do
		get_build $dir/*.spec
	done
elif [[ $ACTION == "get-tfm-build" ]] ; then
	for dir in "$@" ; do
		get_tfm_build $dir/*.spec
	done
else
	echo "Usage: $0 ACTION"
	exit 1
fi
