#!/bin/bash -e

BASE_DIR=$HOME/dev
CLONE_DIR=$BASE_DIR/packaging-deps
PACKAGING_DIR=$BASE_DIR/foreman-packaging

die() {
	echo "$@"
	exit 1
}

ensure_checkout() {
	local repo=$1
	local checkout=$2
	local branch=$3

	(
		if [[ -d $checkout ]] ; then
			cd $checkout
			git checkout $branch
			git reset --hard
			git pull
		else
			git clone $repo $checkout -o upstream -b $branch
		fi
	)
}

update_gem_deps() {
	local checkout="$1"
	local spec_file="$2"

	if [[ -f "${checkout}/Gemfile" ]] ; then
		$PACKAGING_DIR/get-gemfile-deps "${checkout}/Gemfile" | $PACKAGING_DIR/update-requirements specfile - "$spec_file"
	fi
}

update_npm_deps() {
	local checkout="$1"
	local spec_file="$2"

	if [[ -f "${checkout}/package.json" ]] ; then
		$PACKAGING_DIR/update-requirements npm "${checkout}/package.json" "$spec_file"
	fi
}

update_foreman_spec() {
	local checkout="${CLONE_DIR}/foreman"
	local git_remote="ghf:foreman"
	local package="foreman"
	local spec_file="${PACKAGING_DIR}/packages/foreman/${package}/${package}.spec"
	local existing=${1:-0}

	ensure_checkout $git_remote $checkout develop
	update_gem_deps $checkout $spec_file
	update_npm_deps $checkout $spec_file

	git diff-index --quiet HEAD && die "No changes"

	if [[ $existing == 0 ]] ; then
		obal bump-release $package --changelog="Update Gem and NPM dependencies"
	fi
	git add $spec_file
}

update_katello_spec() {
	local checkout="${CLONE_DIR}/katello"
	local git_remote="ghk:katello"
	local package="rubygem-katello"
	local spec_file="${PACKAGING_DIR}/packages/katello/${package}/${package}.spec"
	local existing=${1:-0}

	ensure_checkout $git_remote $checkout master
	update_npm_deps $checkout $spec_file

	git diff-index --quiet HEAD && die "No changes"

	if [[ $existing == 0 ]] ; then
		obal bump-release $package --changelog="Update NPM dependencies"
	fi
	git add $spec_file
}

update() {
	local package=$1
	local branch=${2:-rpm/develop}
	local local_branch="rpm/update-${package}-deps"
	local remote="origin"
	local message="Update ${package} package dependencies"

	(
		cd $PACKAGING_DIR
		git fetch "$remote"
		if git branch | grep -q "\b${local_branch}\b" ; then
			git checkout "${local_branch}"
			git rebase --autostash "${remote}/${branch}"
			update_${package}_spec 1
			git commit --amend -m "$message"
			git push -f
		else
			git checkout -b "${local_branch}" "${remote}/${branch}"
			update_${package}_spec
			git commit -m "$message"
			git phr -b "${branch}" -m "$message"
		fi
	)
}

if [[ "$1" != "foreman" ]] && [[ "$1" != "katello" ]] ; then
	echo "Usage: $0 [foreman|katello]"
	exit 1
fi

update $1
