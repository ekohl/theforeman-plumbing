#!/usr/bin/env python3

import json
import os

import click
from github import Github


def get_github():
    try:
        token = os.environ['GITHUB_TOKEN']
    except KeyError:
        username = os.environ['GITHUB_USERNAME']
        password = os.environ['GITHUB_PASSWORD']
        return Github(username, password)
    else:
        return Github(token)


def get_label(labels, label):
    for name in [label['name']] + label.get('aliases', []):
        if name in labels:
            return labels[name]
        elif name.lower() in labels:
            return labels[name.lower()]

def get_to_update(current_labels, desired_labels):
    for desired in desired_labels:
        current = get_label(current_labels, desired)
        if current and current.color != desired['color']:
            yield current, desired


def repository_has_label(label, repository):
    return '/puppet-' not in repository or label not in ('Modulesync', 'skip-changelog')


@click.command()
@click.argument('repository', nargs=-1)
@click.option('--dry-run', is_flag=True)
@click.option('--config', default='labels.json', type=click.File())
def cli(repository, dry_run, config):
    try:
        github = get_github()
    except KeyError:
        raise click.ClickException('Unable to find Github token or username/password')

    labels = json.load(config)

    for repo in map(github.get_repo, repository):
        click.echo('Updating labels for ' + repo.name)

        current = {label.name: label for label in repo.get_labels()}

        to_add = [label for label in labels if get_label(current, label) is None and
                  repository_has_label(label['name'], repo.name)]
        to_update = list(get_to_update(current, labels))

        if dry_run:
            if to_add:
                click.echo('  Would add ' + ', '.join(label['name'] for label in to_add))
        else:
            for label in to_add:
                click.echo('  Adding {} (#{})'.format(label['name'], label['color']))
                repo.create_label(label['name'], label['color'])

        if dry_run:
            if to_update:
                click.echo('  Would update ' + ', '.join(label.name for label, _ in to_update))
        else:
            for old_label, new_label in to_update:
                click.echo('  Updating {} -> {} (#{} to #{})'.format(
                    old_label.name, new_label['name'], old_label.color, new_label['color']))
                old_label.edit(new_label['name'], new_label['color'])


if __name__ == '__main__':
    cli()  # pylint: disable=no-value-for-parameter
