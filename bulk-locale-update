#!/bin/bash

FILTER="$1"

set -e
set -o pipefail

CLONE_DIRECTORY="$HOME/dev"
FOREMAN_PLUGIN_TEMPLATE="${CLONE_DIRECTORY}/foreman_plugin_template"
FOREMAN_WORKTREE="$HOME/dev/foreman-plugins"
FOREMAN_CHECKOUT="${CLONE_DIRECTORY}/foreman"
FOREMAN_BUNDLER_FILE="bundler.d/i18n.local.rb"
TRANSLATION_BRANCH="update-translations"

JSON="$(curl -s https://theforeman.github.io/foreman-plugin-overview/index.json)"

UPDATED=()

ensure_clean() {
	if [[ -n "$(git status --porcelain)" ]] ; then
		echo "$PWD working directory is dirty"
		exit 1
	fi
}

checkout_default_branch() {
	DEFAULT_BRANCH="$(basename "$(git symbolic-ref refs/remotes/upstream/HEAD)")"
	git checkout "$DEFAULT_BRANCH"
}

update_checkout() {
	if [[ -z $NO_UPDATE ]] ; then
		git pull
	fi
}

bundle_install() {
	if [[ -f Gemfile ]] && [[ -z $NO_BUNDLE ]] ; then
		rm -f Gemfile.lock
		bundle install
	fi
}

list_foreman_plugins() {
	local plugin_urls
	plugin_urls=$(echo "$JSON" | jq -r '.foreman[][] | select(.translations) | .url')
	if [[ -n $FILTER ]] ; then
		plugin_urls="$(echo "$plugin_urls" | grep -E "$FILTER")"
	fi
	echo "$plugin_urls"
}

list_hammer_plugins() {
	local plugin_urls
	plugin_urls=$(echo "$JSON" | jq -r '.cli[][] | select(.translations) | .url')
	if [[ -n $FILTER ]] ; then
		plugin_urls="$(echo "$plugin_urls" | grep -E "$FILTER")"
	fi
	echo "$plugin_urls"
}

sync_foreman_plugin_makefile() {
	local migrated
	if grep -q '^\[f' .tx/config ; then
		tx migrate
		rm .tx/config_*
		migrated=true
	fi
	sed -i '4,${ /^$/d }' .tx/config
	crudini --set .tx/config main host https://app.transifex.com
	if grep -q minimum_perc .tx/config ; then
		sed -i '/minimum_perc/ s/= [0-9]\+/= 0/' .tx/config
	else
		echo 'minimum_perc           = 0' >> .tx/config
	fi
	if [[ $migrated == true ]] ; then
		git commit --file - .tx/config <<-EOF
		Migrate transifex config to new transifex-cli format

		The old transifex-client no longer works and transifex-cli has a
		different file format.
		EOF
	fi
	cp "${FOREMAN_PLUGIN_TEMPLATE}/locale/Makefile" locale/Makefile
	if [[ -n "$(git status --porcelain .tx/config locale/Makefile)" ]] ; then
		git commit -m 'Sync locale Makefile from plugin template' .tx/config locale/Makefile
	fi
}

checkout_translation_branch() {
	git branch | grep -q "$TRANSLATION_BRANCH" && git branch -D "$TRANSLATION_BRANCH"
	git checkout -b "$TRANSLATION_BRANCH"
}

update_hammer_plugins() {
	# CLI plugins run in their own checkout
	for url in $(list_hammer_plugins) ; do
		NAME="$(basename "$url")"
		DIRECTORY="${CLONE_DIRECTORY}/${NAME}"

		if [[ ! -d "${DIRECTORY}" ]] ; then
			git clone -o upstream "$url" "$DIRECTORY"
		fi

		cd "${DIRECTORY}"

		ensure_clean
		checkout_default_branch
		update_checkout

		checkout_translation_branch
		bundle_install

		make -C locale tx-pull

		if [[ -n "$(git status --porcelain)" ]] ; then
			git commit -am "i18n - extracting new, pulling from tx"
			UPDATED+=("$DIRECTORY")
		fi
	done
}

update_foreman_plugin() {
	local url name directory
	url=$1
	name="$(basename "$url")"
	directory="${CLONE_DIRECTORY}/${name}"

	if [[ ! -d "${directory}" ]] ; then
		git clone -o upstream "$url" "$directory"
	fi

	cd "${directory}"

	if [[ ! -f .tx/config ]] ; then
		echo "[${name}] Missing translation config"
		exit 1
	fi

	if git branch | grep -q "$TRANSLATION_BRANCH" ; then
		echo "[${name}] Updating $TRANSLATION_BRANCH"
		git checkout "$TRANSLATION_BRANCH"
		git fetch upstream
		git rebase --autostash upstream/HEAD
	else
		echo "[${name}] Creating $TRANSLATION_BRANCH"
		ensure_clean
		checkout_default_branch
		update_checkout
		checkout_translation_branch
	fi

	if [[ $name != katello ]] && [[ $name != foreman-tasks ]] ; then
		sync_foreman_plugin_makefile
	fi

	git clean -xf locale

	make -C locale tx-pull

	WORKTREE="${FOREMAN_WORKTREE}/${name}"
	if [[ -d "${WORKTREE}" ]] ; then
		cd "${WORKTREE}"
		ensure_clean
		git reset --hard upstream/HEAD
	else
		cd "$FOREMAN_CHECKOUT"
		git worktree add --track -b "i18n-${name}" "$WORKTREE" upstream/HEAD
		echo "gem '${name}', path: '${directory}'" > "${WORKTREE}/${FOREMAN_BUNDLER_FILE}"
		cp "${WORKTREE}/config/settings.yaml.test" "${WORKTREE}/config/settings.yaml"
		cat > "${WORKTREE}/config/database.yml" <<-EOF
		development:
		  adapter: postgresql
		  database: foreman-$name
		  encoding: utf8
		EOF
	fi

	cd "$WORKTREE"
	rbenv local 2.7.6
	bundle_install
	bundle exec rake db:create db:migrate

	bundle exec rake "plugin:gettext[${name}]" "plugin:po_to_json[${name}]"

	cd "$directory"
	if [[ -n "$(git status --porcelain)" ]] ; then
		if [[ $name == katello ]] ; then
			echo "[$name] skipping commit"
			# make -C locale commit-translation-files
		else
			make -j "$(nproc)" -C locale mo-files
		fi
	fi

	UPDATED+=("$directory")
}

update_foreman_plugins() {
	eval "$(rbenv init - bash)"
	unset GEM_HOME

	if [[ ! -d "${FOREMAN_CHECKOUT}" ]] ; then
		git clone -o upstream https://github.com/theforeman/foreman "$FOREMAN_CHECKOUT"
	fi

	cd "$FOREMAN_CHECKOUT"
	git fetch upstream

	# Foreman plugins run from Foreman
	for url in $(list_foreman_plugins) ; do
		update_foreman_plugin "$url"
	done
}

if ! command -v tx > /dev/null ; then
	echo "tx not present - downloading"
	curl -L https://github.com/transifex/cli/releases/latest/download/tx-linux-amd64.tar.gz | tar zxf - -C ~/bin tx
fi

if ! command -v msgfmt > /dev/null ; then
	echo "msgfmt not present - please install gettext"
	exit 1
fi

#list_hammer_plugins
#list_foreman_plugins
#update_hammer_plugins
update_foreman_plugins

for directory in "${UPDATED[@]}" ; do
	echo "$directory"
done
